EntityFrameworkCore
EntityFrameworkCore.Sqlite
EntityFrameworkCore.Design

dotnet ef migrations add InitialCreate -o Data/Migrations

Difference between asynchronous request and synchronous request is that 
the thread in which synchronous request is run is blocked meaning its going
to wait for each actions to finish before it executes.

Asynchronous doesn't need to wait i.e. non blocking on the thread. It also
help with scalability especially when querying the database with complicated 
queries which takes time we need to make our calls asynchronous.

How this works is that it make use of a delegate (i.e. passing the function to another function) to help execute 
the task and once that is done the delegate notifies us that I am done and wait for others to complete.

Architecture
From the solution root run the command below
dotnet new 	classlib -o Core
dotnet new 	classlib -o Infrastructure

add reference Infrastructure to the API project.
we cd into API and run the command below

dotnet add reference ../Infrastructure

cd in to Infrastructure and add reference to the Core project 
dotnet add reference ../Core/

cd into the root solution which is skinet and run the code for restore
dotnet restore

Migration
dotnet ef --startup-project .\API migrations add InitialCreate -p .\Infrastructure -o Data/Migrations  
OR
dotnet ef --startup-project API/ migrations add InitialCreate -p Infrastructure/ -o Data/Migrations

THEN
dotnet ef --startup-project .\API database update
OR
dotnet ef --startup-project .\API database update

SWITCH IDE'S from code to visual studio


dotnet tool update --global dotnet-ef

Part 3 V-20

Get started.

dotnet ef database drop -p Infrastructure/ -s API/

to drop the database

To remove the last migration we run the command below

dotnet ef migrations remove -p Infrastructure/ -s API/

To recreate the migration we make use of the command below

dotnet ef migrations add InitialCreate -p Infrastructure/ -s API/ -o Data/Migrations

Difference between FirstOrDefaultAsync() and SingleOrDefaultAsync()

FirstOrDefaultAsync() will return an entity as soon as it finds it in the list

SingleOrDefaultAsync() will do the same but will throw an exception if it finds more than 
one of the same entity in the list.

With eager loading we can include additional entities based on the navigational properties
already defined within the entities by making using of the include keyword while making the request.

Start V4 
Generics and Specification Pattern

Specification Pattern is to help with specifics as regards what we want to achieve.
With specification pattern we can describe a query in an object we want to return.

With specification pattern our methods can have meaningful name e.g. ProductWithTypesAndBrandsSpecification()


We need to add our generic repository in startup class making use of keyword typeof so it works generically.

We now need to replace the includes in the product repository class by making use of a specification pattern
and still use our generic repository. We will create a new folder in core project and call it specifications.

First we will create a generic property like the code below
Expression<Func<T, bool>> Criteria {get; }

The code above can be read as an Expression that takes a function and the function takes a type with it's return type
in our case a boolean.

Next we create a base specification to implement the ISpecification.
The whole purpose of the specification pattern and what we have done so far is to replace the includes in 
the product repository. That is what the AddInludeMethod will help us achieve.

Next we look at the specification evaluation. This is going to live in the infrastructure project.

Testing out the debugger in vs code
we set a break point
click the debugging tab and attach a debugger in our case .net core attach
then run your application or get it starteed.
if you dont have the .vscode folder just open the command pallete and serach for generate assets for build and debug
then hit the play button to start debugging.

Add Automapper
Automapper.Extensions.Microsoft.DependencyInjection

ctr shift P 
then type nuget add package then 
Automapper.Extensions.Microsoft.DependencyInjection





























